<%
  type = local_assigns[:type] || 'primary'
  
  classes = {
    'primary' =>        "inline-flex items-center justify-center px-4 py-2 text-md font-medium rounded border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 cursor-pointer",
    'primary-accent' => "inline-flex items-center justify-center px-4 py-2 text-md font-medium rounded border border-transparent bg-default-primary text-white hover:bg-default-primary-darker focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-default-primary disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 cursor-pointer",
    'secondary' =>      "inline-flex items-center justify-center px-4 py-2 text-md font-medium rounded border-2 border-blue-600 text-blue-500 hover:border-blue-700 hover:text-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 cursor-pointer",
    'danger' =>         "inline-flex items-center justify-center px-4 py-2 text-md font-medium rounded border border-transparent bg-red-600 text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 cursor-pointer",
    'link' =>           "inline-flex items-center justify-center px-2 py-1 text-md font-medium text-blue-600 hover:text-blue-800 underline-offset-4 hover:underline focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 cursor-pointer",
  }
  
  css = local_assigns[:class] || classes[type]
  link = local_assigns[:link]
  method = local_assigns[:method]
  use_button_to = method.present? && method != :get
  params = local_assigns[:params] || {}
  remote = local_assigns[:remote]
  form = local_assigns[:form] || {}
  form[:remote] = remote if remote.present?
  opts = local_assigns.except(:class, :is_link, :type, :method, :params, :remote, :form)
%>

<% if use_button_to && link %>
  <%= button_to link, params, { method: method || :post, form: form, class: css }.merge(opts) do %>
    <span class="<%= css %>"><%= yield %></span>
  <% end %>
<% elsif link %>
  <%= link_to link, opts.merge(class: css) do %>
    <%= yield %>
  <% end %>
<% else %>
  <%= content_tag :button, opts.merge(class: css) do %>
    <%= yield %>
  <% end %>
<% end %>